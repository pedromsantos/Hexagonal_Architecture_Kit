from ...domain.world import World, WorldBuilder, WorldRepository
from ..sid_generator import SidGenerator


class InMemoryWorldRepository(WorldRepository):
    """Driven Adapter - In-memory implementation of WorldRepository

    This repository loads the complete World aggregate once and returns it.
    All world traversal and querying is handled by the World aggregate root itself.
    """

    def __init__(self, world: World | None = None) -> None:
        super().__init__()
        self._world = world or self._create_default_world()

    def _create_default_world(self) -> World:
        """Create the default world using WorldBuilder

        SIDs are generated by the infrastructure layer (external to domain).
        """
        builder = WorldBuilder()
        # Generate SIDs in infrastructure layer, pass to domain
        entrance_sid = SidGenerator.generate()
        north_corridor_sid = SidGenerator.generate()
        east_chamber_sid = SidGenerator.generate()
        torch_sid = SidGenerator.generate()

        return builder.create_starter_world(
            entrance_sid=entrance_sid,
            north_corridor_sid=north_corridor_sid,
            east_chamber_sid=east_chamber_sid,
            torch_sid=torch_sid,
        )

    def get_world(self) -> World:
        """Get the complete world aggregate with all locations loaded"""
        return self._world
